project( GKLEE )
cmake_minimum_required(VERSION 2.8.8 FATAL_ERROR)

set ( GKLEE_VERSION_MAJOR 0)
set ( GKLEE_VERSION_MINOR 1)


# -----------------------------------------------------------------------------
# Make RelWithDebInfo the default build type if otherwise not set
# -----------------------------------------------------------------------------
set(build_types Debug Release RelWithDebInfo MinSizeRel)
if(NOT CMAKE_BUILD_TYPE)

      message(STATUS "You can choose the type of build, options are:${build_types}")
      set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE String
          "Options are ${build_types}"
          FORCE
         )

      # Provide drop down menu options in cmake-gui
      set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${build_types})
endif()
message(STATUS "Doing a ${CMAKE_BUILD_TYPE} build")

# -----------------------------------------------------------------------------
# Option to enable/disable assertions
# -----------------------------------------------------------------------------

# Filter out definition of NDEBUG from the default build configuration flags.
# We will add this ourselves if we want to disable assertions
foreach (build_config ${build_types})
    string(TOUPPER ${build_config} upper_case_build_config)
    foreach (language CXX C)
        set(VAR_TO_MODIFY "CMAKE_${language}_FLAGS_${upper_case_build_config}")
        string(REGEX REPLACE "(^| )[/-]D *NDEBUG($| )"
                             " "
                             replacement
                             "${${VAR_TO_MODIFY}}"
              )
        #message("Original (${VAR_TO_MODIFY}) is ${${VAR_TO_MODIFY}} replacement is ${replacement}")
        set(${VAR_TO_MODIFY} "${replacement}" CACHE STRING "Default flags for ${build_config} configuration" FORCE)
    endforeach()
endforeach()

option(ENABLE_ASSERTIONS "Build with assertions enabled" ON)
if (ENABLE_ASSERTIONS)
    # NDEBUG was already removed.
else()
    # Note this definition doesn't appear in the cache variables.
    add_definitions( "-DNDEBUG" )
endif()

# Search paths for custom CMake modules
set( CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules )
#set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH};${LLVM_SRC}/src/LLVM/cmake/modules )

include( ${CMAKE_MODULE_PATH}/CompilerFlags.cmake )


#does system check for basic capabilities (for settings in config.h.in, including e.g. PACKAGE_BUGREPORT)
include( ${CMAKE_MODULE_PATH}/Introspect.cmake )

CONFIGURE_FILE( Gklee/include/klee/Config/config.h.in Gklee/include/klee/Config/config.h)


#installs external projects -- stp and llvm
MESSAGE( "loading SetupExterns.cmake" )
include( ${CMAKE_MODULE_PATH}/SetupExterns.cmake )

#includes custom function for building llvm bytecode archives (i.e. .bca)
include( ${CMAKE_MODULE_PATH}/Macros.cmake )



message( "CMAKE_MODULE_PATH is ${CMAKE_MODULE_PATH}" )

# -----------------------------------------------------------------------------
# Set the appropriate build flags
# -----------------------------------------------------------------------------
include(CheckCXXCompilerFlag)

macro(add_cxx_flag_if_supported flagname)
	string( SUBSTRING ${flagname} 1 -1 newflag )
	message( "newflag is ${newflag}" )
  check_cxx_compiler_flag("${flagname}" HAVE_FLAG_${newflag})

  if(HAVE_FLAG_${newflag})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flagname}")
  endif()
endmacro()

if(BUILD_SHARED_LIBS)
    message(STATUS "Building shared library currently broken due to mix of C++/C code")
    add_cxx_flag_if_supported("-fPIC")
endif()

# check_cxx_compiler_flag("-std=gnu++11" HAVE_FLAG_STD_GNUCPP11)
# check_cxx_compiler_flag("-std=gnu++0x" HAVE_FLAG_STD_GNUCPP0X)
# check_cxx_compiler_flag("-std=c++11" HAVE_FLAG_STD_CPP11)
# check_cxx_compiler_flag("-std=c++0x" HAVE_FLAG_STD_CPP0X)
# check_cxx_compiler_flag("-stdlib=libc++" HAVE_FLAG_STDLIB_LIBCPP)

# if(HAVE_FLAG_STD_GNUCPP11)
#   set(CMAKE_CXX_FLAGS "-std=gnu++11 ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_GNUCPP0X)
#   set(CMAKE_CXX_FLAGS "-std=gnu++0x ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_CPP11)
#   set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_CPP0X)
#   set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
# endif()

# if(APPLE AND HAVE_FLAG_STDLIB_LIBCPP)
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
# endif()

add_cxx_flag_if_supported("-std=c++11")
add_cxx_flag_if_supported("-Wall")
#add_cxx_flag_if_supported("-Wextra")
add_cxx_flag_if_supported("-pedantic")
add_cxx_flag_if_supported("-Wunused")
add_cxx_flag_if_supported("-Wsign-compare")
add_cxx_flag_if_supported("-Wtype-limits")
add_cxx_flag_if_supported("-Wuninitialized")
add_cxx_flag_if_supported("-Wno-deprecated")
add_cxx_flag_if_supported("-Wstrict-aliasing")
add_cxx_flag_if_supported("-Wpointer-arith")
add_cxx_flag_if_supported("-Wheader-guard")
add_cxx_flag_if_supported("-fno-exceptions")
add_cxx_flag_if_supported("-fPIC")
add_cxx_flag_if_supported("-Woverloaded-virtual")
add_cxx_flag_if_supported("-Wcast-qual")
add_cxx_flag_if_supported("-pedantic")
add_cxx_flag_if_supported("-fno-rtti")
add_cxx_flag_if_supported("-Wno-unused_parameter")
add_cxx_flag_if_supported("-Wwrite-strings")


add_definitions("-D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D_GNU_SOURCE")

option(TUNE_NATIVE "Use -mtune=native" OFF)
if(TUNE_NATIVE)
  add_cxx_flag_if_supported("-mtune=native")
endif()


message( "done checking flags.  They're now: ${CMAKE_CXX_FLAGS}" )

#-----------------------------------------------------------------------------
#Enable LLVM sanitizations.
#Note that check_cxx_compiler_flag doesn't work, a fix is needed here
#-----------------------------------------------------------------------------
macro(add_cxx_flag flagname)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flagname}")
endmacro()

option(SANITIZE "Use Clang sanitizers. This will force using clang++ as the compiler" OFF)
if (SANITIZE)
    # Set in Cache so user can tweak it later
    SET(CMAKE_CXX_COMPILER "clang++" CACHE FILEPATH "" FORCE)
    message("Forcing compiler:${CMAKE_CXX_COMPILER}")
    add_cxx_flag("-fsanitize=return")
    add_cxx_flag("-fsanitize=bounds")
    add_cxx_flag("-fsanitize=integer")
    add_cxx_flag("-fsanitize=undefined")
    add_cxx_flag("-fsanitize=float-divide-by-zero")
    add_cxx_flag("-fsanitize=integer-divide-by-zero")
    add_cxx_flag("-fsanitize=null")
    add_cxx_flag("-fsanitize=unsigned-integer-overflow")
    add_cxx_flag("-fsanitize=address")
    add_cxx_flag("-Wno-bitfield-constant-conversion")
endif()

# # -----------------------------------------------------------------------------
# # Let the user decide if they want to build shared or static client library.
# # STP will link against this client library
# # -----------------------------------------------------------------------------
# option(BUILD_SHARED_LIBS "Build client library as a shared library" ON)


# if (WIN32)
#   # building of shared lib on windows is not done at source level
#   set(BUILD_SHARED_LIBS OFF)
#   message(WARNING "Disabling building of shared library on Windows")
# else()
#     option(BUILD_STATIC_BIN "Build a static binary (and no shared libs)" OFF)

#     if (BUILD_STATIC_BIN)
#         set(BUILD_SHARED_LIBS OFF)
#         # Flags for the linker will be set later
#     endif()
# endif()

# if (BUILD_SHARED_LIBS)
#   option(ALSO_BUILD_STATIC_LIB "IF building shared library, also build the static library" ON)

#   set(STP_SHARED_LIBRARY libstp) # Used for exporting target

#   if (ALSO_BUILD_STATIC_LIB AND NOT WIN32)
#     list(APPEND TARGETS_TO_EXPORT libstp_static)
#     set(STP_STATIC_LIBRARY libstp_static) # Used for exporting target
#   endif()

# else()
#   set(STP_STATIC_LIBRARY libstp) # Used for exporting target
#   unset(ALSO_BUILD_STATIC_LIB CACHE) # Hide this option for ccmake and cmake-gui users
# endif()

# -----------------------------------------------------------------------------
# Set the appropriate build flags
# -----------------------------------------------------------------------------
include(CheckCXXCompilerFlag)

macro(add_cxx_flag flagname)
  check_cxx_compiler_flag("${flagname}" HAVE_FLAG_${flagname})

  if(HAVE_FLAG_${flagname})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flagname}")
  endif()
endmacro()

# if(BUILD_SHARED_LIBS)
#     message(STATUS "Building shared library currently broken due to mix of C++/C code")
#     add_cxx_flag("-fPIC")
# endif()

# check_cxx_compiler_flag("-std=gnu++11" HAVE_FLAG_STD_GNUCPP11)
# check_cxx_compiler_flag("-std=gnu++0x" HAVE_FLAG_STD_GNUCPP0X)
# check_cxx_compiler_flag("-std=c++11" HAVE_FLAG_STD_CPP11)
# check_cxx_compiler_flag("-std=c++0x" HAVE_FLAG_STD_CPP0X)
# check_cxx_compiler_flag("-stdlib=libc++" HAVE_FLAG_STDLIB_LIBCPP)

# if(HAVE_FLAG_STD_GNUCPP11)
#   set(CMAKE_CXX_FLAGS "-std=gnu++11 ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_GNUCPP0X)
#   set(CMAKE_CXX_FLAGS "-std=gnu++0x ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_CPP11)
#   set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
# elseif(HAVE_FLAG_STD_CPP0X)
#   set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}")
# endif()

# if(APPLE AND HAVE_FLAG_STDLIB_LIBCPP)
#   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
# endif()

# if(WIN32)
#   set(FLEX_PATH_HINT "e:/cygwin/bin" CACHE STRING "Flex path hints, can be null if on your path")
#   set(BISON_PATH_HINT "e:/cygwin/bin" CACHE STRING "Bison path hints, can be null if on your path")
#   set(PERL_PATH_HINT "C:/Perl/bin" CACHE STRING "Perl path hints, can be null if on your pat")

#   set(PHINTS ${PERL_PATH_HINT} ${FLEX_PATH_HINT} ${BISON_PATH_HINT})

#   if(MSVC)
#       set(OPTIMIZITION_FLAGS  "/GL /Ox /Oi /Ot /Oy")
#       set(STP_DEFS_COMM ${STP_DEFS_COMM} -D_CRT_SECURE_NO_WARNINGS)
#       set(STP_INCL_COMM windows/winports windows/winports/msc99hdr ${STP_INCL_COMM})
#       include_directories(${STP_INCL_COMM})

#       # stack size of MSVC must be specified
#       string(REGEX REPLACE "/STACK:[0-9]+" "" CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS})
#       set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:256000000")

#       # inline is not a keyword in visual studios old C version, allow its redefinition
#       add_definitions("-D_ALLOW_KEYWORD_MACROS")
#   else()
#       # mingw
#       set(STP_DEFS_COMM ${STP_DEFS_COMM} -DEXT_HASH_MAP)
#   endif()
#   add_definitions(${STP_DEFS_COMM})
# endif()

# -----------------------------------------------------------------------------
# Determine the locations of C++ hash_set and hash_map
# -----------------------------------------------------------------------------

# include(CheckCxxHashSet)
# check_cxx_hashset()

# include(CheckCxxHashMultiSet)
# check_cxx_hashmultiset()

# include(CheckCxxHashMap)
# check_cxx_hashmap()

# -----------------------------------------------------------------------------
# Write out the config.h
# -----------------------------------------------------------------------------

configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/Gklee/include/klee/Config/config.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/Gklee/include/klee/Config/config.h"
)


# -----------------------------------------------------------------------------
# Set up includes
# -----------------------------------------------------------------------------
# include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
# include_directories("${CMAKE_CURRENT_BINARY_DIR}/include")

# # FIXME: External library includes
# include_directories(# For extlib-abc and extlib-constbv
#                     ${PROJECT_SOURCE_DIR}/lib
#                     # For minisat and cryptominisat2
#                     ${PROJECT_SOURCE_DIR}/lib/Sat
#                    )

# -----------------------------------------------------------------------------
# Uncomment these for static compilation under Linux (messes up Valgrind)
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Add Git revision
# -----------------------------------------------------------------------------

# include(GetGitRevisionDescription)
# get_git_head_revision(GIT_REFSPEC GIT_SHA1)

# -----------------------------------------------------------------------------
# Find the Boost package components
# -----------------------------------------------------------------------------

# if(NOT BUILD_SHARED_LIBS)
#     message("Trying to use static Boost libraries")
#     set(Boost_USE_STATIC_LIBS ON)
# endif()

# option(NO_BOOST "Don't try to use boost" OFF)
# if (NOT NO_BOOST)
#     find_package( Boost 1.46 COMPONENTS program_options)
# endif()
# if(NOT Boost_FOUND)
#     message(STATUS "Only building executable with few command-line options because the boost program_options library were not available")
# else()
#     include_directories(${Boost_INCLUDE_DIRS})
# endif()


# # -----------------------------------------------------------------------------
# # Find CryptoMiniSat4
# # -----------------------------------------------------------------------------
# set(cryptominisat4_DIR "" CACHE PATH "Path to directory containing cryptominisat4Config.cmake")
# find_package(cryptominisat4 CONFIG)
# if (cryptominisat4_FOUND AND HAVE_FLAG_STD_CPP11)
#     message(STATUS "Found CryptoMiniSat4 and C++11, allowing --cryptominisat4 option")
#     add_definitions(-DUSE_CRYPTOMINISAT4)
#     include_directories(${CRYPTOMINISAT4_INCLUDE_DIRS})
#     set(USE_CRYPTOMINISAT4 ON)
# else()
#     message(WARNING "CryptoMiniSat4 or C++11 support not found, not allowing --cryptominisat4 option")
# endif()

# # -----------------------------------------------------------------------------
# # Find Parser and Lexer generators
# # -----------------------------------------------------------------------------
# find_package(BISON REQUIRED)
# find_package(FLEX REQUIRED)

# -----------------------------------------------------------------------------
# Setup library build path (this is **not** the library install path)
# -----------------------------------------------------------------------------
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)

# # -----------------------------------------------------------------------------
# # Provide an export name to be used by targets that wish to export themselves.
# # -----------------------------------------------------------------------------
# set(STP_EXPORT_NAME "STPTargets")

# # -----------------------------------------------------------------------------
# # Testing and Python interface options
# # -----------------------------------------------------------------------------

# option(ENABLE_TESTING "Enable testing" OFF)
# option(ENABLE_PYTHON_INTERFACE "Enable Python interface" ON)

# if (ENABLE_PYTHON_INTERFACE AND NOT BUILD_SHARED_LIBS)
#     message(FATAL_ERROR "Python interface requires shared library")
# endif()

# # Both the testing infrastructure and python interface depend on python
# if(ENABLE_TESTING OR ENABLE_PYTHON_INTERFACE)
#     find_package(PythonInterp REQUIRED)
#     mark_as_advanced(CLEAR PYTHON_EXECUTABLE) # Make visible in cmake-gui/ccmake

#     if(NOT PYTHONINTERP_FOUND)
#         message(FATAL_ERROR "Python cannot be found. Please install it or disable testing and/or python interface")
#     endif()
# endif()

# -----------------------------------------------------------------------------
# Compile all subdirs
# -----------------------------------------------------------------------------

# add_subdirectory(llvm)
# add_subdirectory(tests)

# -----------------------------------------------------------------------------
# Add uninstall target for makefiles
# -----------------------------------------------------------------------------
#TODO add this uninstall support?
# configure_file(
#     "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/cmake_uninstall.cmake.in"
#     "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
#     IMMEDIATE @ONLY)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)

# -----------------------------------------------------------------------------
# Add tests if required
# -----------------------------------------------------------------------------

# if(ENABLE_TESTING)
#     message(STATUS "Testing is enabled")

#     set(UNIT_TEST_EXE_SUFFIX "Tests" CACHE STRING "Suffix for Unit test executable")

#     add_custom_target(check
#                       COMMENT "top level target to invoke all other tests"
#                      )

#     add_subdirectory(tests)
# else()
#     message(WARNING "Testing is disabled")
# endif()

# # -----------------------------------------------------------------------------
# # Export our targets so that other CMake based projects can interface with
# # the build of STP in the build-tree
# # -----------------------------------------------------------------------------
# set(STP_TARGETS_FILENAME "STPTargets.cmake")
# set(STP_CONFIG_FILENAME "STPConfig.cmake")

# # Export targets
# if (Boost_FOUND)
#     export(TARGETS stp ${STP_SHARED_LIBRARY} ${STP_STATIC_LIBRARY} FILE "${PROJECT_BINARY_DIR}/${STP_TARGETS_FILENAME}")
# endif()
# export(TARGETS stp_simple ${STP_SHARED_LIBRARY} ${STP_STATIC_LIBRARY} FILE "${PROJECT_BINARY_DIR}/${STP_TARGETS_FILENAME}")

# # Create STPConfig file
# set(EXPORT_TYPE "Build-tree")
# set(CONF_INCLUDE_DIRS "${PROJECT_BINARY_DIR}/include")
# configure_file(STPConfig.cmake.in
#                "${PROJECT_BINARY_DIR}/${STP_CONFIG_FILENAME}" @ONLY
#               )

# # Export this package to the CMake user package registry
# # Now the user can just use find_package(STP) on their system
# export(PACKAGE STP)


# # -----------------------------------------------------------------------------
# # Export our targets so that other CMake based projects can interface with
# # the build of STP that is installed.
# # -----------------------------------------------------------------------------
# if(WIN32 AND NOT CYGWIN)
#   set(DEF_INSTALL_CMAKE_DIR CMake)
# else()
#   set(DEF_INSTALL_CMAKE_DIR lib/cmake/STP)
# endif()
# set(STP_INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH
#     "Installation directory for STP CMake files")

# # Create STPConfig file
# set(EXPORT_TYPE "installed")
# set(CONF_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
# configure_file(STPConfig.cmake.in
#                "${PROJECT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/${STP_CONFIG_FILENAME}" @ONLY
#               )

# install(FILES
#         "${PROJECT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/${STP_CONFIG_FILENAME}"
#         DESTINATION "${STP_INSTALL_CMAKE_DIR}"
#        )

# # Install the export set for use with the install-tree
# install(EXPORT ${STP_EXPORT_NAME} DESTINATION
#         "${STP_INSTALL_CMAKE_DIR}"
#        )

add_subdirectory(Gklee)
